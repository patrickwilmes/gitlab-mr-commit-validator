package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gitlab-mr-commit-validator/internal"
	"io"
	"net/http"
	"os"
	"strconv"
)

type MR struct {
	ID      int  `json:"id"`
	IID     int  `json:"iid"`
	IsDraft bool `json:"draft"`
}

func main() {
	args := os.Args
	gitlabToken := args[1]
	fmt.Println(gitlabToken)
	var data []MR
	err := getJson("https://gitlab.com/api/v4/projects/26177235/merge_requests?state=opened&access_token="+gitlabToken, &data)
	if err != nil {
		panic(err)
	}
	fmt.Println(data)

	for _, mr := range data {
		var commits []internal.Commit
		err := getJson("https://gitlab.com/api/v4/projects/26177235/merge_requests/"+strconv.Itoa(mr.IID)+"/commits?state=opened&access_token="+gitlabToken, &commits)
		if err != nil {
			panic(err)
		}
		fmt.Println("----")
		for _, commit := range commits {
			if commit.IsValidCommit() != nil {
				fmt.Printf("Invalid commit detected! %d\n", mr.IID)
				if !mr.IsDraft {
					postNote(mr.IID, gitlabToken)
					denyMR(mr.IID, gitlabToken)
				}
			}
		}
		fmt.Println("----")
	}
}

type Note struct {
	Id   int    `json:"id"`
	IId  int    `json:"merge_request_iid"`
	Body string `json:"body"`
}

type MRDeny struct {
	Id    int    `json:"id"`
	IId   int    `json:"merge_request_iid"`
	State string `json:"state_event"`
}

func denyMR(mrId int, accessToken string) {
	url := "https://gitlab.com/api/v4/projects/26177235/merge_requests/" + strconv.Itoa(mrId) + "?access_token=" + accessToken
	fmt.Println("URL:>", url)
	payloadBuf := new(bytes.Buffer)
	note := MRDeny{
		Id:    26177235,
		IId:   mrId,
		State: "close",
	}
	json.NewEncoder(payloadBuf).Encode(note)
	req, err := http.NewRequest("PUT", url, payloadBuf)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	fmt.Println("response Body:", string(body))
}

func postNote(mrId int, accessToken string) {
	url := "https://gitlab.com/api/v4/projects/26177235/merge_requests/" + strconv.Itoa(mrId) + "/notes?access_token=" + accessToken
	fmt.Println("URL:>", url)
	payloadBuf := new(bytes.Buffer)
	note := Note{
		Id:   26177235,
		IId:  mrId,
		Body: "Your Merge requests contains commits that are violating our commit guidelines! Please fix! - This message was generated by a bot",
	}
	json.NewEncoder(payloadBuf).Encode(note)
	req, err := http.NewRequest("POST", url, payloadBuf)
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()

	body, _ := io.ReadAll(resp.Body)
	fmt.Println("response Body:", string(body))
}

func getJson(url string, target interface{}) error {
	r, err := http.Get(url)
	if err != nil {
		return err
	}
	defer r.Body.Close()

	return json.NewDecoder(r.Body).Decode(target)
}
